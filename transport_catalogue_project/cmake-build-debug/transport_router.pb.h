// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace serialize {
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RouterSettings;
struct RouterSettingsDefaultTypeInternal;
extern RouterSettingsDefaultTypeInternal _RouterSettings_default_instance_;
class StopId;
struct StopIdDefaultTypeInternal;
extern StopIdDefaultTypeInternal _StopId_default_instance_;
}  // namespace serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::serialize::Router* Arena::CreateMaybeMessage<::serialize::Router>(Arena*);
template<> ::serialize::RouterSettings* Arena::CreateMaybeMessage<::serialize::RouterSettings>(Arena*);
template<> ::serialize::StopId* Arena::CreateMaybeMessage<::serialize::StopId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialize {

// ===================================================================

class RouterSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.RouterSettings) */ {
 public:
  inline RouterSettings() : RouterSettings(nullptr) {}
  ~RouterSettings() override;
  explicit constexpr RouterSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouterSettings(const RouterSettings& from);
  RouterSettings(RouterSettings&& from) noexcept
    : RouterSettings() {
    *this = ::std::move(from);
  }

  inline RouterSettings& operator=(const RouterSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterSettings& operator=(RouterSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouterSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouterSettings* internal_default_instance() {
    return reinterpret_cast<const RouterSettings*>(
               &_RouterSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouterSettings& a, RouterSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouterSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouterSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouterSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RouterSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.RouterSettings";
  }
  protected:
  explicit RouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  int32_t bus_wait_time() const;
  void set_bus_wait_time(int32_t value);
  private:
  int32_t _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serialize.RouterSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bus_velocity_;
  int32_t bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.StopId) */ {
 public:
  inline StopId() : StopId(nullptr) {}
  ~StopId() override;
  explicit constexpr StopId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopId(const StopId& from);
  StopId(StopId&& from) noexcept
    : StopId() {
    *this = ::std::move(from);
  }

  inline StopId& operator=(const StopId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopId& operator=(StopId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopId& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopId* internal_default_instance() {
    return reinterpret_cast<const StopId*>(
               &_StopId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopId& a, StopId& b) {
    a.Swap(&b);
  }
  inline void Swap(StopId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.StopId";
  }
  protected:
  explicit StopId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serialize.StopId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit constexpr Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Router& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 3,
    kRouterSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
  };
  // repeated .serialize.StopId stop_id = 3;
  int stop_id_size() const;
  private:
  int _internal_stop_id_size() const;
  public:
  void clear_stop_id();
  ::serialize::StopId* mutable_stop_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::StopId >*
      mutable_stop_id();
  private:
  const ::serialize::StopId& _internal_stop_id(int index) const;
  ::serialize::StopId* _internal_add_stop_id();
  public:
  const ::serialize::StopId& stop_id(int index) const;
  ::serialize::StopId* add_stop_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::StopId >&
      stop_id() const;

  // .serialize.RouterSettings router_settings = 1;
  bool has_router_settings() const;
  private:
  bool _internal_has_router_settings() const;
  public:
  void clear_router_settings();
  const ::serialize::RouterSettings& router_settings() const;
  PROTOBUF_NODISCARD ::serialize::RouterSettings* release_router_settings();
  ::serialize::RouterSettings* mutable_router_settings();
  void set_allocated_router_settings(::serialize::RouterSettings* router_settings);
  private:
  const ::serialize::RouterSettings& _internal_router_settings() const;
  ::serialize::RouterSettings* _internal_mutable_router_settings();
  public:
  void unsafe_arena_set_allocated_router_settings(
      ::serialize::RouterSettings* router_settings);
  ::serialize::RouterSettings* unsafe_arena_release_router_settings();

  // .serialize.Graph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::serialize::Graph& graph() const;
  PROTOBUF_NODISCARD ::serialize::Graph* release_graph();
  ::serialize::Graph* mutable_graph();
  void set_allocated_graph(::serialize::Graph* graph);
  private:
  const ::serialize::Graph& _internal_graph() const;
  ::serialize::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::serialize::Graph* graph);
  ::serialize::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::StopId > stop_id_;
  ::serialize::RouterSettings* router_settings_;
  ::serialize::Graph* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouterSettings

// int32 bus_wait_time = 1;
inline void RouterSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0;
}
inline int32_t RouterSettings::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline int32_t RouterSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:serialize.RouterSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RouterSettings::_internal_set_bus_wait_time(int32_t value) {
  
  bus_wait_time_ = value;
}
inline void RouterSettings::set_bus_wait_time(int32_t value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:serialize.RouterSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RouterSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double RouterSettings::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline double RouterSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:serialize.RouterSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RouterSettings::_internal_set_bus_velocity(double value) {
  
  bus_velocity_ = value;
}
inline void RouterSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:serialize.RouterSettings.bus_velocity)
}

// -------------------------------------------------------------------

// StopId

// string name = 1;
inline void StopId::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopId::name() const {
  // @@protoc_insertion_point(field_get:serialize.StopId.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopId::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize.StopId.name)
}
inline std::string* StopId::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialize.StopId.name)
  return _s;
}
inline const std::string& StopId::_internal_name() const {
  return name_.Get();
}
inline void StopId::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopId::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopId::release_name() {
  // @@protoc_insertion_point(field_release:serialize.StopId.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize.StopId.name)
}

// int32 id = 2;
inline void StopId::clear_id() {
  id_ = 0;
}
inline int32_t StopId::_internal_id() const {
  return id_;
}
inline int32_t StopId::id() const {
  // @@protoc_insertion_point(field_get:serialize.StopId.id)
  return _internal_id();
}
inline void StopId::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void StopId::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serialize.StopId.id)
}

// -------------------------------------------------------------------

// Router

// .serialize.RouterSettings router_settings = 1;
inline bool Router::_internal_has_router_settings() const {
  return this != internal_default_instance() && router_settings_ != nullptr;
}
inline bool Router::has_router_settings() const {
  return _internal_has_router_settings();
}
inline void Router::clear_router_settings() {
  if (GetArenaForAllocation() == nullptr && router_settings_ != nullptr) {
    delete router_settings_;
  }
  router_settings_ = nullptr;
}
inline const ::serialize::RouterSettings& Router::_internal_router_settings() const {
  const ::serialize::RouterSettings* p = router_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize::RouterSettings&>(
      ::serialize::_RouterSettings_default_instance_);
}
inline const ::serialize::RouterSettings& Router::router_settings() const {
  // @@protoc_insertion_point(field_get:serialize.Router.router_settings)
  return _internal_router_settings();
}
inline void Router::unsafe_arena_set_allocated_router_settings(
    ::serialize::RouterSettings* router_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings_);
  }
  router_settings_ = router_settings;
  if (router_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize.Router.router_settings)
}
inline ::serialize::RouterSettings* Router::release_router_settings() {
  
  ::serialize::RouterSettings* temp = router_settings_;
  router_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize::RouterSettings* Router::unsafe_arena_release_router_settings() {
  // @@protoc_insertion_point(field_release:serialize.Router.router_settings)
  
  ::serialize::RouterSettings* temp = router_settings_;
  router_settings_ = nullptr;
  return temp;
}
inline ::serialize::RouterSettings* Router::_internal_mutable_router_settings() {
  
  if (router_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize::RouterSettings>(GetArenaForAllocation());
    router_settings_ = p;
  }
  return router_settings_;
}
inline ::serialize::RouterSettings* Router::mutable_router_settings() {
  ::serialize::RouterSettings* _msg = _internal_mutable_router_settings();
  // @@protoc_insertion_point(field_mutable:serialize.Router.router_settings)
  return _msg;
}
inline void Router::set_allocated_router_settings(::serialize::RouterSettings* router_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete router_settings_;
  }
  if (router_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serialize::RouterSettings>::GetOwningArena(router_settings);
    if (message_arena != submessage_arena) {
      router_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_settings, submessage_arena);
    }
    
  } else {
    
  }
  router_settings_ = router_settings;
  // @@protoc_insertion_point(field_set_allocated:serialize.Router.router_settings)
}

// .serialize.Graph graph = 2;
inline bool Router::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool Router::has_graph() const {
  return _internal_has_graph();
}
inline const ::serialize::Graph& Router::_internal_graph() const {
  const ::serialize::Graph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize::Graph&>(
      ::serialize::_Graph_default_instance_);
}
inline const ::serialize::Graph& Router::graph() const {
  // @@protoc_insertion_point(field_get:serialize.Router.graph)
  return _internal_graph();
}
inline void Router::unsafe_arena_set_allocated_graph(
    ::serialize::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize.Router.graph)
}
inline ::serialize::Graph* Router::release_graph() {
  
  ::serialize::Graph* temp = graph_;
  graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize::Graph* Router::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:serialize.Router.graph)
  
  ::serialize::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::serialize::Graph* Router::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize::Graph>(GetArenaForAllocation());
    graph_ = p;
  }
  return graph_;
}
inline ::serialize::Graph* Router::mutable_graph() {
  ::serialize::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:serialize.Router.graph)
  return _msg;
}
inline void Router::set_allocated_graph(::serialize::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:serialize.Router.graph)
}

// repeated .serialize.StopId stop_id = 3;
inline int Router::_internal_stop_id_size() const {
  return stop_id_.size();
}
inline int Router::stop_id_size() const {
  return _internal_stop_id_size();
}
inline void Router::clear_stop_id() {
  stop_id_.Clear();
}
inline ::serialize::StopId* Router::mutable_stop_id(int index) {
  // @@protoc_insertion_point(field_mutable:serialize.Router.stop_id)
  return stop_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::StopId >*
Router::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable_list:serialize.Router.stop_id)
  return &stop_id_;
}
inline const ::serialize::StopId& Router::_internal_stop_id(int index) const {
  return stop_id_.Get(index);
}
inline const ::serialize::StopId& Router::stop_id(int index) const {
  // @@protoc_insertion_point(field_get:serialize.Router.stop_id)
  return _internal_stop_id(index);
}
inline ::serialize::StopId* Router::_internal_add_stop_id() {
  return stop_id_.Add();
}
inline ::serialize::StopId* Router::add_stop_id() {
  ::serialize::StopId* _add = _internal_add_stop_id();
  // @@protoc_insertion_point(field_add:serialize.Router.stop_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::StopId >&
Router::stop_id() const {
  // @@protoc_insertion_point(field_list:serialize.Router.stop_id)
  return stop_id_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
