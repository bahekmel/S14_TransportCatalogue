// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::serialize::Bus* Arena::CreateMaybeMessage<::serialize::Bus>(Arena*);
template<> ::serialize::Stop* Arena::CreateMaybeMessage<::serialize::Stop>(Arena*);
template<> ::serialize::TransportCatalogue* Arena::CreateMaybeMessage<::serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialize {

// ===================================================================

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 2,
    kNearStopFieldNumber = 3,
    kDistanceFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated double coordinate = 2;
  int coordinate_size() const;
  private:
  int _internal_coordinate_size() const;
  public:
  void clear_coordinate();
  private:
  double _internal_coordinate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coordinate() const;
  void _internal_add_coordinate(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coordinate();
  public:
  double coordinate(int index) const;
  void set_coordinate(int index, double value);
  void add_coordinate(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coordinate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coordinate();

  // repeated string near_stop = 3;
  int near_stop_size() const;
  private:
  int _internal_near_stop_size() const;
  public:
  void clear_near_stop();
  const std::string& near_stop(int index) const;
  std::string* mutable_near_stop(int index);
  void set_near_stop(int index, const std::string& value);
  void set_near_stop(int index, std::string&& value);
  void set_near_stop(int index, const char* value);
  void set_near_stop(int index, const char* value, size_t size);
  std::string* add_near_stop();
  void add_near_stop(const std::string& value);
  void add_near_stop(std::string&& value);
  void add_near_stop(const char* value);
  void add_near_stop(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& near_stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_near_stop();
  private:
  const std::string& _internal_near_stop(int index) const;
  std::string* _internal_add_near_stop();
  public:

  // repeated int32 distance = 4;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  int32_t _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_distance() const;
  void _internal_add_distance(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_distance();
  public:
  int32_t distance(int index) const;
  void set_distance(int index, int32_t value);
  void add_distance(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_distance();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coordinate_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> near_stop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit constexpr Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 2,
    kNameFieldNumber = 1,
    kFinalStopFieldNumber = 4,
    kIsCircleFieldNumber = 3,
  };
  // repeated string stop = 2;
  int stop_size() const;
  private:
  int _internal_stop_size() const;
  public:
  void clear_stop();
  const std::string& stop(int index) const;
  std::string* mutable_stop(int index);
  void set_stop(int index, const std::string& value);
  void set_stop(int index, std::string&& value);
  void set_stop(int index, const char* value);
  void set_stop(int index, const char* value, size_t size);
  std::string* add_stop();
  void add_stop(const std::string& value);
  void add_stop(std::string&& value);
  void add_stop(const char* value);
  void add_stop(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stop();
  private:
  const std::string& _internal_stop(int index) const;
  std::string* _internal_add_stop();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string final_stop = 4;
  void clear_final_stop();
  const std::string& final_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_stop();
  PROTOBUF_NODISCARD std::string* release_final_stop();
  void set_allocated_final_stop(std::string* final_stop);
  private:
  const std::string& _internal_final_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_stop(const std::string& value);
  std::string* _internal_mutable_final_stop();
  public:

  // bool is_circle = 3;
  void clear_is_circle();
  bool is_circle() const;
  void set_is_circle(bool value);
  private:
  bool _internal_is_circle() const;
  void _internal_set_is_circle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_stop_;
  bool is_circle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalogue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 1,
    kBusFieldNumber = 2,
    kRenderSettingsFieldNumber = 3,
    kRouterFieldNumber = 4,
  };
  // repeated .serialize.Stop stop = 1;
  int stop_size() const;
  private:
  int _internal_stop_size() const;
  public:
  void clear_stop();
  ::serialize::Stop* mutable_stop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Stop >*
      mutable_stop();
  private:
  const ::serialize::Stop& _internal_stop(int index) const;
  ::serialize::Stop* _internal_add_stop();
  public:
  const ::serialize::Stop& stop(int index) const;
  ::serialize::Stop* add_stop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Stop >&
      stop() const;

  // repeated .serialize.Bus bus = 2;
  int bus_size() const;
  private:
  int _internal_bus_size() const;
  public:
  void clear_bus();
  ::serialize::Bus* mutable_bus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Bus >*
      mutable_bus();
  private:
  const ::serialize::Bus& _internal_bus(int index) const;
  ::serialize::Bus* _internal_add_bus();
  public:
  const ::serialize::Bus& bus(int index) const;
  ::serialize::Bus* add_bus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Bus >&
      bus() const;

  // .serialize.RenderSettings render_settings = 3;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::serialize::RenderSettings& render_settings() const;
  PROTOBUF_NODISCARD ::serialize::RenderSettings* release_render_settings();
  ::serialize::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::serialize::RenderSettings* render_settings);
  private:
  const ::serialize::RenderSettings& _internal_render_settings() const;
  ::serialize::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::serialize::RenderSettings* render_settings);
  ::serialize::RenderSettings* unsafe_arena_release_render_settings();

  // .serialize.Router router = 4;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::serialize::Router& router() const;
  PROTOBUF_NODISCARD ::serialize::Router* release_router();
  ::serialize::Router* mutable_router();
  void set_allocated_router(::serialize::Router* router);
  private:
  const ::serialize::Router& _internal_router() const;
  ::serialize::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::serialize::Router* router);
  ::serialize::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Stop > stop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Bus > bus_;
  ::serialize::RenderSettings* render_settings_;
  ::serialize::Router* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stop

// string name = 1;
inline void Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:serialize.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialize.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:serialize.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize.Stop.name)
}

// repeated double coordinate = 2;
inline int Stop::_internal_coordinate_size() const {
  return coordinate_.size();
}
inline int Stop::coordinate_size() const {
  return _internal_coordinate_size();
}
inline void Stop::clear_coordinate() {
  coordinate_.Clear();
}
inline double Stop::_internal_coordinate(int index) const {
  return coordinate_.Get(index);
}
inline double Stop::coordinate(int index) const {
  // @@protoc_insertion_point(field_get:serialize.Stop.coordinate)
  return _internal_coordinate(index);
}
inline void Stop::set_coordinate(int index, double value) {
  coordinate_.Set(index, value);
  // @@protoc_insertion_point(field_set:serialize.Stop.coordinate)
}
inline void Stop::_internal_add_coordinate(double value) {
  coordinate_.Add(value);
}
inline void Stop::add_coordinate(double value) {
  _internal_add_coordinate(value);
  // @@protoc_insertion_point(field_add:serialize.Stop.coordinate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Stop::_internal_coordinate() const {
  return coordinate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Stop::coordinate() const {
  // @@protoc_insertion_point(field_list:serialize.Stop.coordinate)
  return _internal_coordinate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Stop::_internal_mutable_coordinate() {
  return &coordinate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Stop::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:serialize.Stop.coordinate)
  return _internal_mutable_coordinate();
}

// repeated string near_stop = 3;
inline int Stop::_internal_near_stop_size() const {
  return near_stop_.size();
}
inline int Stop::near_stop_size() const {
  return _internal_near_stop_size();
}
inline void Stop::clear_near_stop() {
  near_stop_.Clear();
}
inline std::string* Stop::add_near_stop() {
  std::string* _s = _internal_add_near_stop();
  // @@protoc_insertion_point(field_add_mutable:serialize.Stop.near_stop)
  return _s;
}
inline const std::string& Stop::_internal_near_stop(int index) const {
  return near_stop_.Get(index);
}
inline const std::string& Stop::near_stop(int index) const {
  // @@protoc_insertion_point(field_get:serialize.Stop.near_stop)
  return _internal_near_stop(index);
}
inline std::string* Stop::mutable_near_stop(int index) {
  // @@protoc_insertion_point(field_mutable:serialize.Stop.near_stop)
  return near_stop_.Mutable(index);
}
inline void Stop::set_near_stop(int index, const std::string& value) {
  near_stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:serialize.Stop.near_stop)
}
inline void Stop::set_near_stop(int index, std::string&& value) {
  near_stop_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:serialize.Stop.near_stop)
}
inline void Stop::set_near_stop(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  near_stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialize.Stop.near_stop)
}
inline void Stop::set_near_stop(int index, const char* value, size_t size) {
  near_stop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialize.Stop.near_stop)
}
inline std::string* Stop::_internal_add_near_stop() {
  return near_stop_.Add();
}
inline void Stop::add_near_stop(const std::string& value) {
  near_stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialize.Stop.near_stop)
}
inline void Stop::add_near_stop(std::string&& value) {
  near_stop_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialize.Stop.near_stop)
}
inline void Stop::add_near_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  near_stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialize.Stop.near_stop)
}
inline void Stop::add_near_stop(const char* value, size_t size) {
  near_stop_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialize.Stop.near_stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stop::near_stop() const {
  // @@protoc_insertion_point(field_list:serialize.Stop.near_stop)
  return near_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stop::mutable_near_stop() {
  // @@protoc_insertion_point(field_mutable_list:serialize.Stop.near_stop)
  return &near_stop_;
}

// repeated int32 distance = 4;
inline int Stop::_internal_distance_size() const {
  return distance_.size();
}
inline int Stop::distance_size() const {
  return _internal_distance_size();
}
inline void Stop::clear_distance() {
  distance_.Clear();
}
inline int32_t Stop::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline int32_t Stop::distance(int index) const {
  // @@protoc_insertion_point(field_get:serialize.Stop.distance)
  return _internal_distance(index);
}
inline void Stop::set_distance(int index, int32_t value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:serialize.Stop.distance)
}
inline void Stop::_internal_add_distance(int32_t value) {
  distance_.Add(value);
}
inline void Stop::add_distance(int32_t value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:serialize.Stop.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stop::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stop::distance() const {
  // @@protoc_insertion_point(field_list:serialize.Stop.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stop::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stop::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:serialize.Stop.distance)
  return _internal_mutable_distance();
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:serialize.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialize.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:serialize.Bus.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize.Bus.name)
}

// repeated string stop = 2;
inline int Bus::_internal_stop_size() const {
  return stop_.size();
}
inline int Bus::stop_size() const {
  return _internal_stop_size();
}
inline void Bus::clear_stop() {
  stop_.Clear();
}
inline std::string* Bus::add_stop() {
  std::string* _s = _internal_add_stop();
  // @@protoc_insertion_point(field_add_mutable:serialize.Bus.stop)
  return _s;
}
inline const std::string& Bus::_internal_stop(int index) const {
  return stop_.Get(index);
}
inline const std::string& Bus::stop(int index) const {
  // @@protoc_insertion_point(field_get:serialize.Bus.stop)
  return _internal_stop(index);
}
inline std::string* Bus::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:serialize.Bus.stop)
  return stop_.Mutable(index);
}
inline void Bus::set_stop(int index, const std::string& value) {
  stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:serialize.Bus.stop)
}
inline void Bus::set_stop(int index, std::string&& value) {
  stop_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:serialize.Bus.stop)
}
inline void Bus::set_stop(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialize.Bus.stop)
}
inline void Bus::set_stop(int index, const char* value, size_t size) {
  stop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialize.Bus.stop)
}
inline std::string* Bus::_internal_add_stop() {
  return stop_.Add();
}
inline void Bus::add_stop(const std::string& value) {
  stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialize.Bus.stop)
}
inline void Bus::add_stop(std::string&& value) {
  stop_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialize.Bus.stop)
}
inline void Bus::add_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialize.Bus.stop)
}
inline void Bus::add_stop(const char* value, size_t size) {
  stop_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialize.Bus.stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::stop() const {
  // @@protoc_insertion_point(field_list:serialize.Bus.stop)
  return stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:serialize.Bus.stop)
  return &stop_;
}

// bool is_circle = 3;
inline void Bus::clear_is_circle() {
  is_circle_ = false;
}
inline bool Bus::_internal_is_circle() const {
  return is_circle_;
}
inline bool Bus::is_circle() const {
  // @@protoc_insertion_point(field_get:serialize.Bus.is_circle)
  return _internal_is_circle();
}
inline void Bus::_internal_set_is_circle(bool value) {
  
  is_circle_ = value;
}
inline void Bus::set_is_circle(bool value) {
  _internal_set_is_circle(value);
  // @@protoc_insertion_point(field_set:serialize.Bus.is_circle)
}

// string final_stop = 4;
inline void Bus::clear_final_stop() {
  final_stop_.ClearToEmpty();
}
inline const std::string& Bus::final_stop() const {
  // @@protoc_insertion_point(field_get:serialize.Bus.final_stop)
  return _internal_final_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_final_stop(ArgT0&& arg0, ArgT... args) {
 
 final_stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize.Bus.final_stop)
}
inline std::string* Bus::mutable_final_stop() {
  std::string* _s = _internal_mutable_final_stop();
  // @@protoc_insertion_point(field_mutable:serialize.Bus.final_stop)
  return _s;
}
inline const std::string& Bus::_internal_final_stop() const {
  return final_stop_.Get();
}
inline void Bus::_internal_set_final_stop(const std::string& value) {
  
  final_stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_final_stop() {
  
  return final_stop_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Bus::release_final_stop() {
  // @@protoc_insertion_point(field_release:serialize.Bus.final_stop)
  return final_stop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Bus::set_allocated_final_stop(std::string* final_stop) {
  if (final_stop != nullptr) {
    
  } else {
    
  }
  final_stop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), final_stop,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (final_stop_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    final_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize.Bus.final_stop)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .serialize.Stop stop = 1;
inline int TransportCatalogue::_internal_stop_size() const {
  return stop_.size();
}
inline int TransportCatalogue::stop_size() const {
  return _internal_stop_size();
}
inline void TransportCatalogue::clear_stop() {
  stop_.Clear();
}
inline ::serialize::Stop* TransportCatalogue::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:serialize.TransportCatalogue.stop)
  return stop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Stop >*
TransportCatalogue::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:serialize.TransportCatalogue.stop)
  return &stop_;
}
inline const ::serialize::Stop& TransportCatalogue::_internal_stop(int index) const {
  return stop_.Get(index);
}
inline const ::serialize::Stop& TransportCatalogue::stop(int index) const {
  // @@protoc_insertion_point(field_get:serialize.TransportCatalogue.stop)
  return _internal_stop(index);
}
inline ::serialize::Stop* TransportCatalogue::_internal_add_stop() {
  return stop_.Add();
}
inline ::serialize::Stop* TransportCatalogue::add_stop() {
  ::serialize::Stop* _add = _internal_add_stop();
  // @@protoc_insertion_point(field_add:serialize.TransportCatalogue.stop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Stop >&
TransportCatalogue::stop() const {
  // @@protoc_insertion_point(field_list:serialize.TransportCatalogue.stop)
  return stop_;
}

// repeated .serialize.Bus bus = 2;
inline int TransportCatalogue::_internal_bus_size() const {
  return bus_.size();
}
inline int TransportCatalogue::bus_size() const {
  return _internal_bus_size();
}
inline void TransportCatalogue::clear_bus() {
  bus_.Clear();
}
inline ::serialize::Bus* TransportCatalogue::mutable_bus(int index) {
  // @@protoc_insertion_point(field_mutable:serialize.TransportCatalogue.bus)
  return bus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Bus >*
TransportCatalogue::mutable_bus() {
  // @@protoc_insertion_point(field_mutable_list:serialize.TransportCatalogue.bus)
  return &bus_;
}
inline const ::serialize::Bus& TransportCatalogue::_internal_bus(int index) const {
  return bus_.Get(index);
}
inline const ::serialize::Bus& TransportCatalogue::bus(int index) const {
  // @@protoc_insertion_point(field_get:serialize.TransportCatalogue.bus)
  return _internal_bus(index);
}
inline ::serialize::Bus* TransportCatalogue::_internal_add_bus() {
  return bus_.Add();
}
inline ::serialize::Bus* TransportCatalogue::add_bus() {
  ::serialize::Bus* _add = _internal_add_bus();
  // @@protoc_insertion_point(field_add:serialize.TransportCatalogue.bus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize::Bus >&
TransportCatalogue::bus() const {
  // @@protoc_insertion_point(field_list:serialize.TransportCatalogue.bus)
  return bus_;
}

// .serialize.RenderSettings render_settings = 3;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::serialize::RenderSettings& TransportCatalogue::_internal_render_settings() const {
  const ::serialize::RenderSettings* p = render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize::RenderSettings&>(
      ::serialize::_RenderSettings_default_instance_);
}
inline const ::serialize::RenderSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:serialize.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::serialize::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize.TransportCatalogue.render_settings)
}
inline ::serialize::RenderSettings* TransportCatalogue::release_render_settings() {
  
  ::serialize::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize::RenderSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:serialize.TransportCatalogue.render_settings)
  
  ::serialize::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  return temp;
}
inline ::serialize::RenderSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize::RenderSettings>(GetArenaForAllocation());
    render_settings_ = p;
  }
  return render_settings_;
}
inline ::serialize::RenderSettings* TransportCatalogue::mutable_render_settings() {
  ::serialize::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:serialize.TransportCatalogue.render_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_settings(::serialize::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:serialize.TransportCatalogue.render_settings)
}

// .serialize.Router router = 4;
inline bool TransportCatalogue::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalogue::has_router() const {
  return _internal_has_router();
}
inline const ::serialize::Router& TransportCatalogue::_internal_router() const {
  const ::serialize::Router* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize::Router&>(
      ::serialize::_Router_default_instance_);
}
inline const ::serialize::Router& TransportCatalogue::router() const {
  // @@protoc_insertion_point(field_get:serialize.TransportCatalogue.router)
  return _internal_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router(
    ::serialize::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize.TransportCatalogue.router)
}
inline ::serialize::Router* TransportCatalogue::release_router() {
  
  ::serialize::Router* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize::Router* TransportCatalogue::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:serialize.TransportCatalogue.router)
  
  ::serialize::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::serialize::Router* TransportCatalogue::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize::Router>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::serialize::Router* TransportCatalogue::mutable_router() {
  ::serialize::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:serialize.TransportCatalogue.router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router(::serialize::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:serialize.TransportCatalogue.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
